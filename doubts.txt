      /* signup(aira, 123) -> HTTPResponseCode */
       /* signup(aira, password) -> HTTPResponseCode */

 



 DOUBTS: 

    1. function name like sign up is returned as identifier,the parameters in signup ,
they all should also return as identifiers right? 

    2. my type expressions have type constant like int,string etc, and I also included type variables. 
so that when I give any parameters other than specifically string ,int, it should tokenise and parse it too. 
now my doubt is if anything passes in parameters it should be returned as identifier right? 
   
    3. when i execute #testcase 1, aira and 123 are the parameters, and am returning aira(any string) as id, 
but 123 as number token. should i change the lexer file with rule accepting numbers as identifiers instead
of returning number it will return identifier. 
[0-9]+     { 
    yylval.sval = new std::string(yytext);  
    return IDENTIFIER; // Return as IDENTIFIER instead of NUMBER
}

    OR 
in parser file ,in typeExpression modify the grammar rule to convert NUMBER tokens to 
type expressions as if they were identifiers.
type_expr:
    STRING { $$ = new TypeExprNode("string"); }
    | INT { $$ = new TypeExprNode("int"); }
    | HTTP_RESPONSE_CODE { $$ = new TypeExprNode("HTTPResponseCode"); }
    | IDENTIFIER { $$ = new TypeExprNode(*$1); delete $1; }
    | NUMBER { 
        // Convert number to string and create a TypeExprNode as if it was an identifier
        $$ = new TypeExprNode(std::to_string($1)); 
    }
; 
     
   4. at the end when AST am printing, should it print like : id(id, id)-->HTTPResponseCode ? 
   5.just an idea: to add print in lexer and parse file to print which rules and grammar rules were used. 
      
      6. TO-DO:
       -add binary operators as well. 
       -add map structure